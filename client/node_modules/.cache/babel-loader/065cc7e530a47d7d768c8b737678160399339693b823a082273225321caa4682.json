{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mrityunjay kumar\\\\OneDrive\\\\Desktop\\\\connect-real-time-code-editor-main\\\\client\\\\src\\\\Pages\\\\EditorPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useLocation, useNavigate, Navigate, useParams } from \"react-router-dom\";\nimport { ACTIONS } from \"../Action\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditorPage = () => {\n  _s();\n  const effectRan = useRef(false);\n  const codeRef = useRef(null);\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n  const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n  const handleErrors = err => {\n    toast.error(\"Socket connection failed, try again later.\");\n    reactNavigator(\"/\");\n  };\n  useEffect(() => {\n    if (effectRan.current === false) {\n      const init = async () => {\n        var _location$state;\n        socketRef.current = await initSocket();\n        socketRef.current.on(\"connect_error\", err => handleErrors(err));\n        socketRef.current.on(\"connect_failed\", err => handleErrors(err));\n        socketRef.current.emit(ACTIONS.JOIN, {\n          roomId,\n          userName: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userName\n        });\n\n        //listning for joined event\n        socketRef.current.on(ACTIONS.JOINED, ({\n          clients,\n          userName,\n          socketId\n        }) => {\n          var _location$state2;\n          if (userName !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.userName)) {\n            toast.success(`${userName} joined the room.`);\n          }\n          setClients(clients);\n          socketRef.current.emit(ACTIONS.SYNC_CODE, {\n            code: codeRef.current,\n            socketId\n          });\n        });\n\n        //listining for disconnected\n        socketRef.current.on(ACTIONS.DISCONNECTED, ({\n          socketId,\n          userName\n        }) => {\n          toast.success(`${userName} left the room.`);\n          setClients(prev => {\n            return prev.filter(client => client.socketId !== socketId);\n          });\n        });\n      };\n      init();\n      return () => {\n        var _socketRef$current, _socketRef$current2, _socketRef$current3, _socketRef$current4;\n        (_socketRef$current = socketRef.current) === null || _socketRef$current === void 0 ? void 0 : _socketRef$current.off(ACTIONS.JOIN);\n        (_socketRef$current2 = socketRef.current) === null || _socketRef$current2 === void 0 ? void 0 : _socketRef$current2.off(ACTIONS.DISCONNECTED);\n        (_socketRef$current3 = socketRef.current) === null || _socketRef$current3 === void 0 ? void 0 : _socketRef$current3.off(ACTIONS.JOIN);\n        (_socketRef$current4 = socketRef.current) === null || _socketRef$current4 === void 0 ? void 0 : _socketRef$current4.disconnect();\n        effectRan.current = true;\n      };\n    }\n    return () => {\n      var _socketRef$current5, _socketRef$current6, _socketRef$current7, _socketRef$current8;\n      (_socketRef$current5 = socketRef.current) === null || _socketRef$current5 === void 0 ? void 0 : _socketRef$current5.off(ACTIONS.JOIN);\n      (_socketRef$current6 = socketRef.current) === null || _socketRef$current6 === void 0 ? void 0 : _socketRef$current6.off(ACTIONS.DISCONNECTED);\n      (_socketRef$current7 = socketRef.current) === null || _socketRef$current7 === void 0 ? void 0 : _socketRef$current7.off(ACTIONS.JOIN);\n      (_socketRef$current8 = socketRef.current) === null || _socketRef$current8 === void 0 ? void 0 : _socketRef$current8.disconnect();\n    };\n  }, []);\n  const copyRoomId = async () => {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success(\"Room ID copied\");\n    } catch (err) {\n      toast.error(\"Could mot copy the room Id\");\n      console.log(err);\n    }\n  };\n  const leaveRoom = () => {\n    reactNavigator(\"/\");\n    window.location.reload();\n  };\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/connect-logo2.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => {\n            return /*#__PURE__*/_jsxDEV(Client, {\n              userName: client.userName\n            }, client.socketId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        socketRef: socketRef,\n        roomId: roomId,\n        onCodeChange: code => {\n          codeRef.current = code;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(EditorPage, \"lpjmvfGKUDNUGVx8z9dAjy7VkHQ=\", false, function () {\n  return [useLocation, useParams, useNavigate];\n});\n_c = EditorPage;\nexport default EditorPage;\nvar _c;\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","toast","useLocation","useNavigate","Navigate","useParams","ACTIONS","Client","Editor","initSocket","jsxDEV","_jsxDEV","EditorPage","_s","effectRan","codeRef","socketRef","location","roomId","reactNavigator","clients","setClients","handleErrors","err","error","current","init","_location$state","on","emit","JOIN","userName","state","JOINED","socketId","_location$state2","success","SYNC_CODE","code","DISCONNECTED","prev","filter","client","_socketRef$current","_socketRef$current2","_socketRef$current3","_socketRef$current4","off","disconnect","_socketRef$current5","_socketRef$current6","_socketRef$current7","_socketRef$current8","copyRoomId","navigator","clipboard","writeText","console","log","leaveRoom","window","reload","to","fileName","_jsxFileName","lineNumber","columnNumber","className","children","src","alt","map","onClick","onCodeChange","_c","$RefreshReg$"],"sources":["C:/Users/Mrityunjay kumar/OneDrive/Desktop/connect-real-time-code-editor-main/client/src/Pages/EditorPage.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  useLocation,\n  useNavigate,\n  Navigate,\n  useParams,\n} from \"react-router-dom\";\nimport { ACTIONS } from \"../Action\";\nimport Client from \"../components/Client\";\nimport Editor from \"../components/Editor\";\nimport { initSocket } from \"../socket\";\nconst EditorPage = () => {\n  const effectRan = useRef(false);\n  const codeRef = useRef(null);\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const { roomId } = useParams();\n  const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n\n  const handleErrors = (err) => {\n    toast.error(\"Socket connection failed, try again later.\");\n    reactNavigator(\"/\");\n  };\n\n  useEffect(() => {\n    if (effectRan.current === false) {\n      const init = async () => {\n        socketRef.current = await initSocket();\n        socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\n        socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\n\n        socketRef.current.emit(ACTIONS.JOIN, {\n          roomId,\n          userName: location.state?.userName,\n        });\n\n        //listning for joined event\n        socketRef.current.on(\n          ACTIONS.JOINED,\n          ({ clients, userName, socketId }) => {\n            if (userName !== location.state?.userName) {\n              toast.success(`${userName} joined the room.`);\n            }\n            setClients(clients);\n            socketRef.current.emit(ACTIONS.SYNC_CODE, {\n              code: codeRef.current,\n              socketId,\n            });\n          }\n        );\n\n        //listining for disconnected\n        socketRef.current.on(ACTIONS.DISCONNECTED, ({ socketId, userName }) => {\n          toast.success(`${userName} left the room.`);\n          setClients((prev) => {\n            return prev.filter((client) => client.socketId !== socketId);\n          });\n        });\n      };\n      init();\n      return () => {\n        socketRef.current?.off(ACTIONS.JOIN);\n        socketRef.current?.off(ACTIONS.DISCONNECTED);\n        socketRef.current?.off(ACTIONS.JOIN);\n        socketRef.current?.disconnect();\n        effectRan.current = true;\n      };\n    }\n    return () => {\n      socketRef.current?.off(ACTIONS.JOIN);\n      socketRef.current?.off(ACTIONS.DISCONNECTED);\n      socketRef.current?.off(ACTIONS.JOIN);\n      socketRef.current?.disconnect();\n    };\n  }, []);\n\n  const copyRoomId = async () => {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success(\"Room ID copied\");\n    } catch (err) {\n      toast.error(\"Could mot copy the room Id\");\n      console.log(err);\n    }\n  };\n\n  const leaveRoom = () => {\n    reactNavigator(\"/\");\n    window.location.reload();\n  };\n\n  if (!location.state) {\n    return <Navigate to={\"/\"} />;\n  }\n\n  return (\n    <div className=\"mainWrap\">\n      <div className=\"aside\">\n        <div className=\"asideInner\">\n          <div className=\"logo\">\n            <img className=\"logoImage\" src=\"/connect-logo2.png\" alt=\"logo\" />\n          </div>\n          <h3>Connected</h3>\n          <div className=\"clientsList\">\n            {clients.map((client) => {\n              return (\n                <Client key={client.socketId} userName={client.userName} />\n              );\n            })}\n          </div>\n        </div>\n        <button className=\"btn copyBtn\" onClick={copyRoomId}>\n          Copy ROOM ID\n        </button>\n        <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n          Leave\n        </button>\n      </div>\n      <div className=\"editorWrap\">\n        <Editor\n          socketRef={socketRef}\n          roomId={roomId}\n          onCodeChange={(code) => {\n            codeRef.current = code;\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EditorPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}